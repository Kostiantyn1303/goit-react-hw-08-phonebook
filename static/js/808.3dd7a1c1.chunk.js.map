{"version":3,"file":"static/js/808.3dd7a1c1.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","views/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const getFilter = state => state.filter;\nexport const getToken = state => state.auth.token;\nexport const selectItems = state => state.contacts.items;\n","import styled from '@emotion/styled';\nexport const Form = styled.form`\n  margin-bottom: 60px;\n  text-align: center;\n`;\nexport const FormLabel = styled.label`\n  font-size: 20px;\n  font-weight: 700;\n  display: block;\n  margin-bottom: 10px;\n  background-clip: text;\n  background-image: linear-gradient(45deg, #553c9a, #ee4b2b);\n  color: transparent;\n`;\n\nexport const FormBtn = styled.button`\n  cursor: pointer;\n\n  display: block;\n  margin: 0 auto;\n  margin-top: 6px;\n\n  width: 100%;\n  max-width: 180px;\n  height: 30px;\n  padding: 2px 5px;\n\n  color: black;\n  background-color: #e6e6fa;\n  font-size: 14px;\n  font-weight: 700;\n\n  border: none;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.24) 10px 10px 5px 0px;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #010101;\n    background-color: #c8e9e3;\n    box-shadow: rgb(255, 255, 255) -2px -2px 5px,\n      rgba(0, 0, 0, 0.24) 2px 2px 5px;\n  }\n`;\nexport const FormInput = styled.input`\n  width: 200px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px 20px;\n  margin-bottom: 20px;\n  border: none;\n  outline: none;\n  border-radius: 5px;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  transition: all 250ms linear;\n\n  &:focus {\n    box-shadow: rgba(100, 100, 111, 0.6) 0px 7px 29px 0px;\n  }\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Form, FormLabel, FormBtn, FormInput } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contactsOperation';\nimport { selectItems } from 'redux/selectors';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectItems);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const isAdded = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isAdded) {\n      return alert(`${name} is already in contacts.`);\n    }\n    dispatch(addContacts({ name, number }));\n\n    resetForm();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n      <FormInput\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        // pattern=\"[\\p{L} '-]+\"\n        // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n        id={nameInputId}\n      />\n      <FormLabel htmlFor={numberInputId}>Number</FormLabel>\n      <FormInput\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n        id={numberInputId}\n      />\n      <FormBtn type=\"submit\">Add contact</FormBtn>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const FilterLable = styled.label`\n  font-size: 20px;\n  font-weight: 700;\n  display: block;\n  margin-bottom: 10px;\n  background-clip: text;\n  background-image: linear-gradient(45deg, #553c9a, #ee4b2b);\n  color: transparent;\n`;\n\nexport const FilterContainer = styled.div`\n  margin-bottom: 20px;\n`;\nexport const FilterInput = styled.input`\n  width: 200px;\n  margin-top: 20px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px 20px;\n  margin-bottom: 20px;\n  border: none;\n  outline: none;\n  border-radius: 5px;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  transition: all 250ms linear;\n\n  &:focus {\n    box-shadow: rgba(100, 100, 111, 0.6) 0px 7px 29px 0px;\n  }\n`;\n","import { FilterContainer, FilterLable, FilterInput } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { setFilter } from '../../redux/filterSlice';\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const handleChange = evt => {\n    const valueFilter = evt.currentTarget.value.trim();\n    dispatch(setFilter(valueFilter));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLable>\n        Find contacts by name <br />\n        <FilterInput\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={filter}\n          onChange={handleChange}\n        />\n      </FilterLable>\n    </FilterContainer>\n  );\n}\n\nexport default Filter;\n","import styled from '@emotion/styled';\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  max-width: 100%;\n  width: 400px;\n  margin: 0 auto;\n  padding: 15px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n`;\nexport const Items = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const BtnDelete = styled.button`\n  border: none;\n  padding: 4px;\n  :hover,\n  :focus {\n    outline: none;\n    background: #000;\n    color: #fff;\n    cursor: pointer;\n  }\n`;\n","import { List, Items, BtnDelete } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport { deleteContacts } from 'redux/contactsOperation';\nimport { useDispatch } from 'react-redux';\nimport { selectItems } from '../../redux/selectors';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  let filter = useSelector(getFilter);\n  const contacts = useSelector(selectItems);\n\n  const normalizedFilter = filter.toLowerCase();\n  const filteredContacts = () =>\n    contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n\n  const handleDeleteContact = contactsId => {\n    dispatch(deleteContacts(contactsId));\n  };\n\n  return (\n    <List>\n      {contacts &&\n        filteredContacts()?.map(({ id, name, number }) => (\n          <Items key={id}>\n            <span>{name}: </span>\n            <span>{number}</span>\n            <BtnDelete type=\"submit\" onClick={() => handleDeleteContact(id)}>\n              {' '}\n              Delete\n            </BtnDelete>\n          </Items>\n        ))}\n    </List>\n  );\n};\nexport default ContactList;\n","import { useSelector } from 'react-redux';\nimport { getToken } from '../redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactsOperation';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useDispatch } from 'react-redux';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const token = useSelector(getToken);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {token && (\n        <>\n          <ContactForm />\n          <Filter />\n          <ContactList />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["getFilter","state","filter","getToken","auth","token","selectItems","contacts","items","Form","styled","FormLabel","FormBtn","FormInput","nameInputId","nanoid","numberInputId","ContactForm","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","handleChange","evt","currentTarget","value","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContacts","htmlFor","type","required","onChange","id","FilterLable","FilterContainer","FilterInput","placeholder","valueFilter","trim","setFilter","List","Items","BtnDelete","normalizedFilter","includes","map","onClick","contactsId","deleteContacts","useEffect","fetchContacts","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}